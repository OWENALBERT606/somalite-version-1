


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model Role {
  id          String   @id @default(cuid())
  displayName String // Human-readable name (e.g., "Store Manager")
  roleName    String   @unique // System name (e.g., "store_manager")
  description String?
  permissions String[] // Array of permission strings
  users       User[]   @relation("UserRoles")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roleName])
}

model User {
  id            String    @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  phone         String    @unique
  email         String    @unique
  emailVerified DateTime?
  starredQuestions QuestionView[]
  image         String?
  jobTitle      String?
  bio           String?
  questions     Question[]
  blogComments    BlogComment[]
  topics         Topic[]
  responses     Response[]
  votes      Vote[]
  answers       Answer[]
  articles     Article[]
  comments     Comment[]
  discussions    Discussion[]
  roles         Role[]    @relation("UserRoles") // Updated to support multiple roles
  // role          UserRole  @default(USER)
  password      String?
  status        Boolean   @default(true)
  accounts      Account[]
  categories    Category[]
  preferences   Preference[]
  sessions      Session[]
  blogs         Blog[]
  isVerfied     Boolean   @default(false)
  token         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roleId        String?
}

model Category {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  imageUrl    String?
  questions   Question[]
  discussions Discussion[]
  preferences   Preference[]
  users        User[]
  articles     Article[]
  subcategories SubCategory[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
model SubCategory {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  imageUrl    String?
  questions   Question[]
  discussions Discussion[]
  articles     Article[]
  preferences   Preference[]
  // users        User[]
  description String?
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
model Preference {
  id          String    @id @default(cuid())
  title       String
  user       User      @relation(fields: [userId], references: [id])
  userId     String 
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId     String 
  subcategory   SubCategory   @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Blog {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  description   String?      @db.Text // Meta description for SEO
  thumbnail     String?
  content       String?      @db.Text
  published     Boolean?     @default(false)
  featured      Boolean?     @default(false)
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String
  authorName    String
  authorImage   String?
  authorTitle   String?
  category      BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  categoryTitle String
  comments         BlogComment[]
  readingTime   Int? // Estimated reading time in minutes
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {  
  id         String       @id @default(cuid())
  title      String
  content    String
  // views      Int @default(0)
  views     QuestionView[]
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId     String 
  category   Category @relation(fields: [categoryId], references: [id],onDelete: Cascade)
  categoryId    String
  subcategory   SubCategory @relation(fields: [subcategoryId], references: [id],onDelete:  Cascade)
  subcategoryId    String
  answers   Answer[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}
model QuestionView {
  id          String   @id @default(cuid())
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())

  @@unique([questionId, userId]) // Ensure a user can only star a question once
}
model Answer {
  id            String       @id @default(cuid())
  content    String
  question   Question    @relation(fields: [questionId], references: [id])
  questionId   String 
  user       User      @relation(fields: [userId], references: [id])
  userId     String 
  votes      Vote[]  
  upVotes    Int @default(0)
  downVotes  Int @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}
model Vote {
  id        String   @id @default(cuid())
  userId    String
  user      User @relation(fields: [userId], references: [id])

  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String
  type      VoteType
  createdAt DateTime @default(now())

  @@unique([userId, answerId]) // ensures one vote per user per answer
}

enum VoteType {
  UP
  DOWN
}

model Article {
  id            String       @id @default(cuid())
  title         String
  content       String
  Attachment    String?
  comments      Comment[]
  isActive      Boolean @default(false)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  subcategory   SubCategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId    String
  user       User      @relation(fields: [userId], references: [id])
  userId     String 
  likes      Int @default(0)
  dislikes  Int @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}
model Comment {
  id            String       @id @default(cuid())
  content       String
  user          User      @relation(fields: [userId], references: [id])
  userId        String 
  article       Article      @relation(fields: [articleId], references: [id])
  articleId     String 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}
model BlogComment {
  id            String       @id @default(cuid())
  content       String
  blog          Blog      @relation(fields: [blogId], references: [id])
  blogId     String 
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}
model VisitCount {
  id    String   @id @default(cuid())
  count Int      @default(0)
  createdAt DateTime @default(now())
}
model Topic {
  id            String       @id @default(cuid())
  title         String
  description   String
  user          User      @relation(fields: [userId], references: [id])
  userId        String 
  discussions   Discussion[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}
model Discussion {
  id            String       @id @default(cuid())
  title         String
  content       String
  attachment   String?
   subcategory   SubCategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId    String?
  isActive      Boolean @default(true)
  user          User      @relation(fields: [userId], references: [id])
  topicId        String 
  topic          Topic      @relation(fields: [topicId], references: [id])
  category       Category?      @relation(fields: [categoryId], references: [id])
  userId          String
  categoryId        String?
  views         Int @default(0) 
  likes         Int @default(0) 
  dislikes       Int @default(0) 
  responses      Response[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}
model Response {
  id            String       @id @default(cuid())
  content       String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  discussion     Discussion      @relation(fields: [discussionId], references: [id])
  discussionId    String
  likes           Int @default(0)
  dislikes        Int @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}
